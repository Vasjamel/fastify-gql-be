// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUEST
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?  @unique
  password  String
  role      Role     @default(GUEST)
  teacher   Teacher? 
  pupil     Pupil?
}

model Pupil {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  birthday            DateTime              @default(now())
  name                String                @unique
  group               String?
  lessons             Lesson[]              @relation("PupilLessons")
  Task                Task[]
  user                User?                 @relation(fields: [userId], references: [id])
  userId              String?               @unique
}

model Lesson {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  title               String?                
  objective           String?
  category            String?
  subject             String                @unique
  content             LessonContent[]     
  teacher             Teacher?              @relation(fields: [teacherId], references: [id])
  teacherId           String?
  pupils              Pupil[]               @relation("PupilLessons")
  Task                Task[]
}

model LessonContent {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  type                LessonContentType     @default(TEXT)
  order               Int?
  value               String?           
  lesson              Lesson                @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId            String
}

enum LessonContentType {
  TEXT
  VIDEO
  AUDIO
  IMAGE
  PDF
  LINK
}

model Teacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  lessons   Lesson[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  lesson      Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId    String?
  pupil       Pupil?    @relation(fields: [pupilId], references: [id])
  pupilId     String?
}
